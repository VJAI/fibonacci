@use 'sass:string';
@use 'variables' as fibVars;

// Horizontal centering.
@mixin horizontal-center {
  margin-left: auto;
  margin-right: auto;
}

/// Creates flexbox container with passed configuration.
///
/// @param {boolean} $inline
///   Passing `true` creates inline flex container else normal flex container.
/// @param {boolean} $column
///   Passing `true` arranges flex items in column else in row.
/// @param {boolean} $center
///   Passing `true` centers the flex items vertically and horizontally.
/// @param {boolean} $hor
///   Passing `true` centers flex items horizontally.
/// @param {boolean} $ver
///   Passing `true` centers flex items vertically.
/// @param {boolean} $wrap
///   Passing `true` wrap the items.
/// @param {string} $justify
///   Equivalent to flex container's `justify-content` property.
/// @param {string} $align
///   Equivalent to flex container's `align-items` property.
@mixin flex_init(
  $inline: false,
  $column: false,
  $center: false,
  $hor: false,
  $ver: false,
  $wrap: false,
  $justify: null,
  $align: null
) {
  @if $inline {
    display: inline-flex;
  } @else {
    display: flex;
  }

  @if $column {
    flex-direction: column;
  }

  @if $wrap {
    flex-wrap: wrap;
  }

  @if $center == true or ($column == false and $hor == true) or ($column == true and $ver == true) {
    justify-content: center;
  }

  @if $center == true or ($column == false and $ver == true) or ($column == true and $hor == true) {
    align-items: center;
  }

  @if $justify {
    justify-content: string.unquote($justify);
  }

  @if $align {
    align-items: string.unquote($align);
  }
}

/// Updates flexbox container.
///
/// @param {boolean} $column
///   Passing `true` arranges flex items in column and `false` in row.
/// @param {boolean} $wrap
///   Passing `true` wrap the items and `false` unwraps them.
/// @param {string} $justify
///   Equivalent to flex container's `justify-content` property.
/// @param {string} $align
///   Equivalent to flex container's `align-items` property.
@mixin flex_update(
  $column: null,
  $wrap: null,
  $justify: null,
  $align: null
) {
  @if $column == true {
    flex-direction: column;
  } @else if $column == false {
    flex-direction: row;
  }

  @if $wrap == true {
    flex-wrap: wrap;
  } @else if $wrap == false {
    flex-wrap: nowrap;
  }

  @if $justify {
    justify-content: string.unquote($justify);
  }

  @if $align {
    align-items: string.unquote($align);
  }
}

/// Sets a colored noisy background using an image.
/// @param {string} $bg
///   The background color.
@mixin noisy_bg($bg: fibVars.$white) {
  background: url('#{fibVars.$assets-path}/background.png') $bg;
}

/// Sets background, box-shadow and border radius.
/// @param {string} $bg
///   The background color.
@mixin config_container($bg) {
  @include noisy_bg($bg);
  border-radius: fibVars.$border-radius;
  box-shadow: fibVars.$box-shadow;
}